/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Voting, VotingInterface } from "../Voting";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
    ],
    name: "addCandidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "candidates",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "candidatesCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_candidateId",
        type: "uint256",
      },
    ],
    name: "getCandidate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "hasVoted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_candidateId",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610eab806100606000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80633477ee2e1161005b5780633477ee2e146100ec57806335b8e8201461011e578063462e91ec146101505780638da5cb5b1461016c5761007d565b80630121b93f1461008257806309eef43e1461009e5780632d35a8a2146100ce575b600080fd5b61009c60048036038101906100979190610628565b61018a565b005b6100b860048036038101906100b391906106b3565b6102ed565b6040516100c591906106fb565b60405180910390f35b6100d661030d565b6040516100e39190610725565b60405180910390f35b61010660048036038101906101019190610628565b610313565b604051610115939291906107d0565b60405180910390f35b61013860048036038101906101339190610628565b6103c5565b604051610147939291906107d0565b60405180910390f35b61016a60048036038101906101659190610943565b6104ae565b005b6101746105b8565b604051610181919061099b565b60405180910390f35b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610217576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020e90610a02565b60405180910390fd5b60008111801561022957506002548111155b610268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025f90610a6e565b60405180910390fd5b600080828152602001908152602001600020600201600081548092919061028e90610abd565b919050555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60016020528060005260406000206000915054906101000a900460ff1681565b60025481565b600060205280600052604060002060009150905080600001549080600101805461033c90610b34565b80601f016020809104026020016040519081016040528092919081815260200182805461036890610b34565b80156103b55780601f1061038a576101008083540402835291602001916103b5565b820191906000526020600020905b81548152906001019060200180831161039857829003601f168201915b5050505050908060020154905083565b600060606000806000808681526020019081526020016000206040518060600160405290816000820154815260200160018201805461040390610b34565b80601f016020809104026020016040519081016040528092919081815260200182805461042f90610b34565b801561047c5780601f106104515761010080835404028352916020019161047c565b820191906000526020600020905b81548152906001019060200180831161045f57829003601f168201915b505050505081526020016002820154815250509050806000015181602001518260400151935093509350509193909250565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461053e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053590610bd7565b60405180910390fd5b6002600081548092919061055190610abd565b919050555060405180606001604052806002548152602001828152602001600081525060008060025481526020019081526020016000206000820151816000015560208201518160010190816105a79190610da3565b506040820151816002015590505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610605816105f2565b811461061057600080fd5b50565b600081359050610622816105fc565b92915050565b60006020828403121561063e5761063d6105e8565b5b600061064c84828501610613565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061068082610655565b9050919050565b61069081610675565b811461069b57600080fd5b50565b6000813590506106ad81610687565b92915050565b6000602082840312156106c9576106c86105e8565b5b60006106d78482850161069e565b91505092915050565b60008115159050919050565b6106f5816106e0565b82525050565b600060208201905061071060008301846106ec565b92915050565b61071f816105f2565b82525050565b600060208201905061073a6000830184610716565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561077a57808201518184015260208101905061075f565b60008484015250505050565b6000601f19601f8301169050919050565b60006107a282610740565b6107ac818561074b565b93506107bc81856020860161075c565b6107c581610786565b840191505092915050565b60006060820190506107e56000830186610716565b81810360208301526107f78185610797565b90506108066040830184610716565b949350505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61085082610786565b810181811067ffffffffffffffff8211171561086f5761086e610818565b5b80604052505050565b60006108826105de565b905061088e8282610847565b919050565b600067ffffffffffffffff8211156108ae576108ad610818565b5b6108b782610786565b9050602081019050919050565b82818337600083830152505050565b60006108e66108e184610893565b610878565b90508281526020810184848401111561090257610901610813565b5b61090d8482856108c4565b509392505050565b600082601f83011261092a5761092961080e565b5b813561093a8482602086016108d3565b91505092915050565b600060208284031215610959576109586105e8565b5b600082013567ffffffffffffffff811115610977576109766105ed565b5b61098384828501610915565b91505092915050565b61099581610675565b82525050565b60006020820190506109b0600083018461098c565b92915050565b7f596f75206861766520616c726561647920766f74656400000000000000000000600082015250565b60006109ec60168361074b565b91506109f7826109b6565b602082019050919050565b60006020820190508181036000830152610a1b816109df565b9050919050565b7f496e76616c69642063616e646964617465204944000000000000000000000000600082015250565b6000610a5860148361074b565b9150610a6382610a22565b602082019050919050565b60006020820190508181036000830152610a8781610a4b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ac8826105f2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610afa57610af9610a8e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b4c57607f821691505b602082108103610b5f57610b5e610b05565b5b50919050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000610bc160218361074b565b9150610bcc82610b65565b604082019050919050565b60006020820190508181036000830152610bf081610bb4565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610c597fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610c1c565b610c638683610c1c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610ca0610c9b610c96846105f2565b610c7b565b6105f2565b9050919050565b6000819050919050565b610cba83610c85565b610cce610cc682610ca7565b848454610c29565b825550505050565b600090565b610ce3610cd6565b610cee818484610cb1565b505050565b5b81811015610d1257610d07600082610cdb565b600181019050610cf4565b5050565b601f821115610d5757610d2881610bf7565b610d3184610c0c565b81016020851015610d40578190505b610d54610d4c85610c0c565b830182610cf3565b50505b505050565b600082821c905092915050565b6000610d7a60001984600802610d5c565b1980831691505092915050565b6000610d938383610d69565b9150826002028217905092915050565b610dac82610740565b67ffffffffffffffff811115610dc557610dc4610818565b5b610dcf8254610b34565b610dda828285610d16565b600060209050601f831160018114610e0d5760008415610dfb578287015190505b610e058582610d87565b865550610e6d565b601f198416610e1b86610bf7565b60005b82811015610e4357848901518255600182019150602085019450602081019050610e1e565b86831015610e605784890151610e5c601f891682610d69565b8355505b6001600288020188555050505b50505050505056fea264697066735822122060d23bac97bb12e8031313d1cc4ff475a15fbfe414515c0f9f4b1d3ffd77a22d64736f6c634300081c0033";

type VotingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VotingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Voting__factory extends ContractFactory {
  constructor(...args: VotingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Voting & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Voting__factory {
    return super.connect(runner) as Voting__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VotingInterface {
    return new Interface(_abi) as VotingInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Voting {
    return new Contract(address, _abi, runner) as unknown as Voting;
  }
}
